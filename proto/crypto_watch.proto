syntax = "proto3";
package pb;

option go_package = "github.com/cryptowatch_challenge/proto";
import "google/api/annotations.proto";


message AuthenticationGoogleRequest {
  string id_token = 1;
}

message AuthenticationGoogleResponse {
  uint32 flag = 1;
	string message = 2;
  string access_token = 3;
  int64 exp_access = 4;
  string ref_token = 5;
  int64 exp_ref = 6;
  string email = 7;
}

message RegenerateAccessTokenRequest {
  uint32 user_id = 1; 
  string refresh_token = 2;
}

message RegenerateAccessTokenResponse {
  uint32 flag = 1;
	string message = 2;
  string access_token = 3;
  int64 exp_access = 4;
}

message LogoutRequest {
  uint32 user_id = 1; 
  string access_token = 2;
}

message LogoutResponse {
  uint32 flag = 1;
	string message = 2;
}

message Price {
  uint32 price_id = 1;
	uint32 market_id = 2; 
	double price = 3; 
	string created_at = 4;
}

message GetLatestPriceRequest {
  uint32 market_id = 1;
}

message GetLatestPriceResponse {
  uint32 flag = 1;
	string message = 2;
  Price price = 3;
}

message GetPricesRequest {
  uint32 market_id = 1;
  uint32 limit = 2;
  uint32 page = 3;
}

message GetPricesResponse {
  uint32 flag = 1;
	string message = 2;
  repeated Price prices = 3;
}

message PriceChart {
  repeated double price_chart = 1;
}

message GetPricesForChartRequest {
  uint32 nums_hour = 1;
}

message GetPricesForChartResponse {
  uint32 flag = 1;
	string message = 2;
  repeated PriceChart prices = 3;

}

message Position {
  uint32 position_id = 1;
  uint32 user_id = 2;
  string asset = 3;
  string side = 4;
  float size = 5;
  double entry_price = 6;
  uint32 leverage = 7; 
  uint32 status = 8; 
  string created_at = 9;
  string closed_at = 10;
  uint32 market_id = 11;
}

message OpenSyntheticPositionRequest {
  Position position = 1;
}

message OpenSyntheticPositionResponse {
  uint32 flag = 1;
	string message = 2;
  double unrealized_pnl = 3;
}

service CryptoWatch {
  // service: Authentication
  rpc AuthenticationGoogle(AuthenticationGoogleRequest) returns (AuthenticationGoogleResponse) {
    option (google.api.http) = {
      post : "/v1/crypto-watch/auth"
      body : "*"
    };
  }

  rpc RegenerateAccessToken(RegenerateAccessTokenRequest) returns (RegenerateAccessTokenResponse) {
    option (google.api.http) = {
      post : "/v1/crypto-watch/regenerate-access-token"
      body : "*"
    };
  }

  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post : "/v1/crypto-watch/logout"
      body : "*"
    };
  }

  // service: Price
  rpc GetLatestPrice(GetLatestPriceRequest) returns (GetLatestPriceResponse) {
    option (google.api.http) = {
      post : "/v1/crypto-watch/get-latest-price"
      body : "*"
    };
  }

  rpc GetPrices(GetPricesRequest) returns (GetPricesResponse) {
    option (google.api.http) = {
      post : "/v1/crypto-watch/get-prices"
      body : "*"
    };
  }

  rpc GetPricesForChart(GetPricesForChartRequest) returns (GetPricesForChartResponse) {
    option (google.api.http) = {
      post : "/v1/crypto-watch/get-prices-chart"
      body : "*"
    };
  }

  // service: Postion
  rpc OpenSyntheticPosition(OpenSyntheticPositionRequest) returns (OpenSyntheticPositionResponse) {
    option (google.api.http) = {
      post : "/v1/crypto-watch/open-synthetic-position"
      body : "*"
    };
  }
}